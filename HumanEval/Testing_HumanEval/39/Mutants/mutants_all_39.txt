[*] Start mutation process:
   - targets: /home/arghavan/Git_Code/codex_test/HumanEval/Testing_HumanEval/39/script_NDS_39.py
   - tests: /home/arghavan/Git_Code/codex_test/HumanEval/Testing_HumanEval/39/Copilot/test_39_cp_few_shot.py
[*] 0 tests passed:
   - test_39_cp_few_shot [0.00006 s]
[*] Start mutants generation and execution:
   - [#   1] AOD script_NDS_39: 
--------------------------------------------------------------------------------
  10:                 return False
  11:         return True
  12:     f = [0, 1]
  13:     while True:
- 14:         f.append(f[-1] + f[-2])
+ 14:         f.append(f[1] + f[-2])
  15:         if is_prime(f[-1]):
  16:             n -= 1
  17:         if n == 0:
  18:             return f[-1]
--------------------------------------------------------------------------------
[0.00514 s] survived
   - [#   2] AOD script_NDS_39: 
--------------------------------------------------------------------------------
  10:                 return False
  11:         return True
  12:     f = [0, 1]
  13:     while True:
- 14:         f.append(f[-1] + f[-2])
+ 14:         f.append(f[-1] + f[2])
  15:         if is_prime(f[-1]):
  16:             n -= 1
  17:         if n == 0:
  18:             return f[-1]
--------------------------------------------------------------------------------
[0.00585 s] survived
   - [#   3] AOD script_NDS_39: 
--------------------------------------------------------------------------------
  11:         return True
  12:     f = [0, 1]
  13:     while True:
  14:         f.append(f[-1] + f[-2])
- 15:         if is_prime(f[-1]):
+ 15:         if is_prime(f[1]):
  16:             n -= 1
  17:         if n == 0:
  18:             return f[-1]
--------------------------------------------------------------------------------
[0.00821 s] survived
   - [#   4] AOD script_NDS_39: 
--------------------------------------------------------------------------------
  14:         f.append(f[-1] + f[-2])
  15:         if is_prime(f[-1]):
  16:             n -= 1
  17:         if n == 0:
- 18:             return f[-1]
+ 18:             return f[1]
--------------------------------------------------------------------------------
[0.00654 s] survived
   - [#   5] AOR script_NDS_39: 
--------------------------------------------------------------------------------
   4:     
   5:     def is_prime(p):
   6:         if p < 2:
   7:             return False
-  8:         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
+  8:         for k in range(2, min(int(math.sqrt(p)) - 1, p - 1)):
   9:             if p % k == 0:
  10:                 return False
  11:         return True
  12:     f = [0, 1]
--------------------------------------------------------------------------------
[0.00580 s] survived
   - [#   6] AOR script_NDS_39: 
--------------------------------------------------------------------------------
   4:     
   5:     def is_prime(p):
   6:         if p < 2:
   7:             return False
-  8:         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
+  8:         for k in range(2, min(int(math.sqrt(p)) + 1, p + 1)):
   9:             if p % k == 0:
  10:                 return False
  11:         return True
  12:     f = [0, 1]
--------------------------------------------------------------------------------
[0.00667 s] survived
   - [#   7] AOR script_NDS_39: 
--------------------------------------------------------------------------------
   5:     def is_prime(p):
   6:         if p < 2:
   7:             return False
   8:         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
-  9:             if p % k == 0:
+  9:             if p * k == 0:
  10:                 return False
  11:         return True
  12:     f = [0, 1]
  13:     while True:
--------------------------------------------------------------------------------
[0.00696 s] survived
   - [#   8] AOR script_NDS_39: 
--------------------------------------------------------------------------------
  10:                 return False
  11:         return True
  12:     f = [0, 1]
  13:     while True:
- 14:         f.append(f[-1] + f[-2])
+ 14:         f.append(f[+1] + f[-2])
  15:         if is_prime(f[-1]):
  16:             n -= 1
  17:         if n == 0:
  18:             return f[-1]
--------------------------------------------------------------------------------
[0.00598 s] survived
   - [#   9] AOR script_NDS_39: 
--------------------------------------------------------------------------------
  10:                 return False
  11:         return True
  12:     f = [0, 1]
  13:     while True:
- 14:         f.append(f[-1] + f[-2])
+ 14:         f.append(f[-1] - f[-2])
  15:         if is_prime(f[-1]):
  16:             n -= 1
  17:         if n == 0:
  18:             return f[-1]
--------------------------------------------------------------------------------
[0.00628 s] survived
   - [#  10] AOR script_NDS_39: 
--------------------------------------------------------------------------------
  10:                 return False
  11:         return True
  12:     f = [0, 1]
  13:     while True:
- 14:         f.append(f[-1] + f[-2])
+ 14:         f.append(f[-1] + f[+2])
  15:         if is_prime(f[-1]):
  16:             n -= 1
  17:         if n == 0:
  18:             return f[-1]
--------------------------------------------------------------------------------
[0.00626 s] survived
   - [#  11] AOR script_NDS_39: 
--------------------------------------------------------------------------------
  11:         return True
  12:     f = [0, 1]
  13:     while True:
  14:         f.append(f[-1] + f[-2])
- 15:         if is_prime(f[-1]):
+ 15:         if is_prime(f[+1]):
  16:             n -= 1
  17:         if n == 0:
  18:             return f[-1]
--------------------------------------------------------------------------------
[0.00545 s] survived
   - [#  12] AOR script_NDS_39: 
--------------------------------------------------------------------------------
  14:         f.append(f[-1] + f[-2])
  15:         if is_prime(f[-1]):
  16:             n -= 1
  17:         if n == 0:
- 18:             return f[-1]
+ 18:             return f[+1]
--------------------------------------------------------------------------------
[0.00657 s] survived
   - [#  13] ASR script_NDS_39: 
--------------------------------------------------------------------------------
  12:     f = [0, 1]
  13:     while True:
  14:         f.append(f[-1] + f[-2])
  15:         if is_prime(f[-1]):
- 16:             n -= 1
+ 16:             n += 1
  17:         if n == 0:
  18:             return f[-1]
--------------------------------------------------------------------------------
[0.00605 s] survived
   - [#  14] COI script_NDS_39: 
--------------------------------------------------------------------------------
   2:     
   3:     import math
   4:     
   5:     def is_prime(p):
-  6:         if p < 2:
+  6:         if not (p < 2):
   7:             return False
   8:         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
   9:             if p % k == 0:
  10:                 return False
--------------------------------------------------------------------------------
[0.00738 s] survived
   - [#  15] COI script_NDS_39: 
--------------------------------------------------------------------------------
   5:     def is_prime(p):
   6:         if p < 2:
   7:             return False
   8:         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
-  9:             if p % k == 0:
+  9:             if not (p % k == 0):
  10:                 return False
  11:         return True
  12:     f = [0, 1]
  13:     while True:
--------------------------------------------------------------------------------
[0.00634 s] survived
   - [#  16] COI script_NDS_39: 
--------------------------------------------------------------------------------
   9:             if p % k == 0:
  10:                 return False
  11:         return True
  12:     f = [0, 1]
- 13:     while True:
+ 13:     while not True:
  14:         f.append(f[-1] + f[-2])
  15:         if is_prime(f[-1]):
  16:             n -= 1
  17:         if n == 0:
--------------------------------------------------------------------------------
[0.00518 s] survived
   - [#  17] COI script_NDS_39: 
--------------------------------------------------------------------------------
  11:         return True
  12:     f = [0, 1]
  13:     while True:
  14:         f.append(f[-1] + f[-2])
- 15:         if is_prime(f[-1]):
+ 15:         if not (is_prime(f[-1])):
  16:             n -= 1
  17:         if n == 0:
  18:             return f[-1]
--------------------------------------------------------------------------------
[0.00633 s] survived
   - [#  18] COI script_NDS_39: 
--------------------------------------------------------------------------------
  13:     while True:
  14:         f.append(f[-1] + f[-2])
  15:         if is_prime(f[-1]):
  16:             n -= 1
- 17:         if n == 0:
+ 17:         if not (n == 0):
  18:             return f[-1]
--------------------------------------------------------------------------------
[0.00558 s] survived
   - [#  19] ROR script_NDS_39: 
--------------------------------------------------------------------------------
   2:     
   3:     import math
   4:     
   5:     def is_prime(p):
-  6:         if p < 2:
+  6:         if p > 2:
   7:             return False
   8:         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
   9:             if p % k == 0:
  10:                 return False
--------------------------------------------------------------------------------
[0.00754 s] survived
   - [#  20] ROR script_NDS_39: 
--------------------------------------------------------------------------------
   2:     
   3:     import math
   4:     
   5:     def is_prime(p):
-  6:         if p < 2:
+  6:         if p <= 2:
   7:             return False
   8:         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
   9:             if p % k == 0:
  10:                 return False
--------------------------------------------------------------------------------
[0.00555 s] survived
   - [#  21] ROR script_NDS_39: 
--------------------------------------------------------------------------------
   5:     def is_prime(p):
   6:         if p < 2:
   7:             return False
   8:         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
-  9:             if p % k == 0:
+  9:             if p % k != 0:
  10:                 return False
  11:         return True
  12:     f = [0, 1]
  13:     while True:
--------------------------------------------------------------------------------
[0.00658 s] survived
   - [#  22] ROR script_NDS_39: 
--------------------------------------------------------------------------------
  13:     while True:
  14:         f.append(f[-1] + f[-2])
  15:         if is_prime(f[-1]):
  16:             n -= 1
- 17:         if n == 0:
+ 17:         if n != 0:
  18:             return f[-1]
--------------------------------------------------------------------------------
[0.00633 s] survived
[*] Mutation score [0.68784 s]: 0.0%
   - all: 22
   - killed: 0 (0.0%)
   - survived: 22 (100.0%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
