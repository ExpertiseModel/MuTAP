[*] Start mutation process:
   - targets: /home/arghavan/Git_Code/codex_test/HumanEval/Testing_HumanEval/95/script_NDS_95.py
   - tests: /home/arghavan/Git_Code/codex_test/HumanEval/Testing_HumanEval/95/Copilot/test_95_cp_few_shot.py
[*] 0 tests passed:
   - test_95_cp_few_shot [0.00007 s]
[*] Start mutants generation and execution:
   - [#   1] BCR script_NDS_95: 
--------------------------------------------------------------------------------
   7:         for key in dict.keys():
   8:             
   9:             if isinstance(key, str) == False:
  10:                 state = 'mixed'
- 11:                 break
+ 11:                 continue
  12:             if state == 'start':
  13:                 if key.isupper():
  14:                     state = 'upper'
  15:                 elif key.islower():
--------------------------------------------------------------------------------
[0.00651 s] survived
   - [#   2] BCR script_NDS_95: 
--------------------------------------------------------------------------------
  14:                     state = 'upper'
  15:                 elif key.islower():
  16:                     state = 'lower'
  17:                 else:
- 18:                     break
+ 18:                     continue
  19:             elif ((state == 'upper' and not (key.isupper())) or (state == 'lower' and not (key.islower()))):
  20:                 state = 'mixed'
  21:                 break
  22:             else:
--------------------------------------------------------------------------------
[0.00588 s] survived
   - [#   3] BCR script_NDS_95: 
--------------------------------------------------------------------------------
  17:                 else:
  18:                     break
  19:             elif ((state == 'upper' and not (key.isupper())) or (state == 'lower' and not (key.islower()))):
  20:                 state = 'mixed'
- 21:                 break
+ 21:                 continue
  22:             else:
  23:                 break
  24:         return (state == 'upper' or state == 'lower')
--------------------------------------------------------------------------------
[0.00631 s] survived
   - [#   4] BCR script_NDS_95: 
--------------------------------------------------------------------------------
  19:             elif ((state == 'upper' and not (key.isupper())) or (state == 'lower' and not (key.islower()))):
  20:                 state = 'mixed'
  21:                 break
  22:             else:
- 23:                 break
+ 23:                 continue
  24:         return (state == 'upper' or state == 'lower')
--------------------------------------------------------------------------------
[0.00527 s] survived
   - [#   5] COD script_NDS_95: 
--------------------------------------------------------------------------------
  15:                 elif key.islower():
  16:                     state = 'lower'
  17:                 else:
  18:                     break
- 19:             elif ((state == 'upper' and not (key.isupper())) or (state == 'lower' and not (key.islower()))):
+ 19:             elif ((state == 'upper' and key.isupper()) or (state == 'lower' and not (key.islower()))):
  20:                 state = 'mixed'
  21:                 break
  22:             else:
  23:                 break
--------------------------------------------------------------------------------
[0.00509 s] survived
   - [#   6] COD script_NDS_95: 
--------------------------------------------------------------------------------
  15:                 elif key.islower():
  16:                     state = 'lower'
  17:                 else:
  18:                     break
- 19:             elif ((state == 'upper' and not (key.isupper())) or (state == 'lower' and not (key.islower()))):
+ 19:             elif ((state == 'upper' and not (key.isupper())) or (state == 'lower' and key.islower())):
  20:                 state = 'mixed'
  21:                 break
  22:             else:
  23:                 break
--------------------------------------------------------------------------------
[0.00579 s] survived
   - [#   7] COI script_NDS_95: 
--------------------------------------------------------------------------------
   1: def check_dict_case(dict):
   2:     
-  3:     if len(dict.keys()) == 0:
+  3:     if not (len(dict.keys()) == 0):
   4:         return False
   5:     else:
   6:         state = 'start'
   7:         for key in dict.keys():
--------------------------------------------------------------------------------
[0.00541 s] survived
   - [#   8] COI script_NDS_95: 
--------------------------------------------------------------------------------
   5:     else:
   6:         state = 'start'
   7:         for key in dict.keys():
   8:             
-  9:             if isinstance(key, str) == False:
+  9:             if not (isinstance(key, str) == False):
  10:                 state = 'mixed'
  11:                 break
  12:             if state == 'start':
  13:                 if key.isupper():
--------------------------------------------------------------------------------
[0.00622 s] survived
   - [#   9] COI script_NDS_95: 
--------------------------------------------------------------------------------
   8:             
   9:             if isinstance(key, str) == False:
  10:                 state = 'mixed'
  11:                 break
- 12:             if state == 'start':
+ 12:             if not (state == 'start'):
  13:                 if key.isupper():
  14:                     state = 'upper'
  15:                 elif key.islower():
  16:                     state = 'lower'
--------------------------------------------------------------------------------
[0.00630 s] survived
   - [#  10] COI script_NDS_95: 
--------------------------------------------------------------------------------
   9:             if isinstance(key, str) == False:
  10:                 state = 'mixed'
  11:                 break
  12:             if state == 'start':
- 13:                 if key.isupper():
+ 13:                 if not (key.isupper()):
  14:                     state = 'upper'
  15:                 elif key.islower():
  16:                     state = 'lower'
  17:                 else:
--------------------------------------------------------------------------------
[0.00543 s] survived
   - [#  11] COI script_NDS_95: 
--------------------------------------------------------------------------------
  11:                 break
  12:             if state == 'start':
  13:                 if key.isupper():
  14:                     state = 'upper'
- 15:                 elif key.islower():
+ 15:                 elif not (key.islower()):
  16:                     state = 'lower'
  17:                 else:
  18:                     break
  19:             elif ((state == 'upper' and not (key.isupper())) or (state == 'lower' and not (key.islower()))):
--------------------------------------------------------------------------------
[0.00600 s] survived
   - [#  12] COI script_NDS_95: 
--------------------------------------------------------------------------------
  15:                 elif key.islower():
  16:                     state = 'lower'
  17:                 else:
  18:                     break
- 19:             elif ((state == 'upper' and not (key.isupper())) or (state == 'lower' and not (key.islower()))):
+ 19:             elif not (((state == 'upper' and not (key.isupper())) or (state == 'lower' and not (key.islower())))):
  20:                 state = 'mixed'
  21:                 break
  22:             else:
  23:                 break
--------------------------------------------------------------------------------
[0.00671 s] survived
   - [#  13] LCR script_NDS_95: 
--------------------------------------------------------------------------------
  15:                 elif key.islower():
  16:                     state = 'lower'
  17:                 else:
  18:                     break
- 19:             elif ((state == 'upper' and not (key.isupper())) or (state == 'lower' and not (key.islower()))):
+ 19:             elif ((state == 'upper' and not (key.isupper())) and (state == 'lower' and not (key.islower()))):
  20:                 state = 'mixed'
  21:                 break
  22:             else:
  23:                 break
--------------------------------------------------------------------------------
[0.00701 s] survived
   - [#  14] LCR script_NDS_95: 
--------------------------------------------------------------------------------
  15:                 elif key.islower():
  16:                     state = 'lower'
  17:                 else:
  18:                     break
- 19:             elif ((state == 'upper' and not (key.isupper())) or (state == 'lower' and not (key.islower()))):
+ 19:             elif ((state == 'upper' or not (key.isupper())) or (state == 'lower' and not (key.islower()))):
  20:                 state = 'mixed'
  21:                 break
  22:             else:
  23:                 break
--------------------------------------------------------------------------------
[0.00510 s] survived
   - [#  15] LCR script_NDS_95: 
--------------------------------------------------------------------------------
  15:                 elif key.islower():
  16:                     state = 'lower'
  17:                 else:
  18:                     break
- 19:             elif ((state == 'upper' and not (key.isupper())) or (state == 'lower' and not (key.islower()))):
+ 19:             elif ((state == 'upper' and not (key.isupper())) or (state == 'lower' or not (key.islower()))):
  20:                 state = 'mixed'
  21:                 break
  22:             else:
  23:                 break
--------------------------------------------------------------------------------
[0.00817 s] survived
   - [#  16] LCR script_NDS_95: 
--------------------------------------------------------------------------------
  20:                 state = 'mixed'
  21:                 break
  22:             else:
  23:                 break
- 24:         return (state == 'upper' or state == 'lower')
+ 24:         return (state == 'upper' and state == 'lower')
--------------------------------------------------------------------------------
[0.00638 s] survived
   - [#  17] ROR script_NDS_95: 
--------------------------------------------------------------------------------
   1: def check_dict_case(dict):
   2:     
-  3:     if len(dict.keys()) == 0:
+  3:     if len(dict.keys()) != 0:
   4:         return False
   5:     else:
   6:         state = 'start'
   7:         for key in dict.keys():
--------------------------------------------------------------------------------
[0.00718 s] survived
   - [#  18] ROR script_NDS_95: 
--------------------------------------------------------------------------------
   5:     else:
   6:         state = 'start'
   7:         for key in dict.keys():
   8:             
-  9:             if isinstance(key, str) == False:
+  9:             if isinstance(key, str) != False:
  10:                 state = 'mixed'
  11:                 break
  12:             if state == 'start':
  13:                 if key.isupper():
--------------------------------------------------------------------------------
[0.00863 s] survived
   - [#  19] ROR script_NDS_95: 
--------------------------------------------------------------------------------
   8:             
   9:             if isinstance(key, str) == False:
  10:                 state = 'mixed'
  11:                 break
- 12:             if state == 'start':
+ 12:             if state != 'start':
  13:                 if key.isupper():
  14:                     state = 'upper'
  15:                 elif key.islower():
  16:                     state = 'lower'
--------------------------------------------------------------------------------
[0.00505 s] survived
   - [#  20] ROR script_NDS_95: 
--------------------------------------------------------------------------------
  15:                 elif key.islower():
  16:                     state = 'lower'
  17:                 else:
  18:                     break
- 19:             elif ((state == 'upper' and not (key.isupper())) or (state == 'lower' and not (key.islower()))):
+ 19:             elif ((state != 'upper' and not (key.isupper())) or (state == 'lower' and not (key.islower()))):
  20:                 state = 'mixed'
  21:                 break
  22:             else:
  23:                 break
--------------------------------------------------------------------------------
[0.00743 s] survived
   - [#  21] ROR script_NDS_95: 
--------------------------------------------------------------------------------
  15:                 elif key.islower():
  16:                     state = 'lower'
  17:                 else:
  18:                     break
- 19:             elif ((state == 'upper' and not (key.isupper())) or (state == 'lower' and not (key.islower()))):
+ 19:             elif ((state == 'upper' and not (key.isupper())) or (state != 'lower' and not (key.islower()))):
  20:                 state = 'mixed'
  21:                 break
  22:             else:
  23:                 break
--------------------------------------------------------------------------------
[0.00834 s] survived
   - [#  22] ROR script_NDS_95: 
--------------------------------------------------------------------------------
  20:                 state = 'mixed'
  21:                 break
  22:             else:
  23:                 break
- 24:         return (state == 'upper' or state == 'lower')
+ 24:         return (state != 'upper' or state == 'lower')
--------------------------------------------------------------------------------
[0.00593 s] survived
   - [#  23] ROR script_NDS_95: 
--------------------------------------------------------------------------------
  20:                 state = 'mixed'
  21:                 break
  22:             else:
  23:                 break
- 24:         return (state == 'upper' or state == 'lower')
+ 24:         return (state == 'upper' or state != 'lower')
--------------------------------------------------------------------------------
[0.00650 s] survived
[*] Mutation score [0.71710 s]: 0.0%
   - all: 23
   - killed: 0 (0.0%)
   - survived: 23 (100.0%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
