[*] Start mutation process:
   - targets: /home/arghavan/Git_Code/codex_test/HumanEval/Testing_HumanEval/47/script_NDS_47.py
   - tests: /home/arghavan/Git_Code/codex_test/HumanEval/Testing_HumanEval/47/Copilot/test_47_cp_few_shot.py
[*] 0 tests passed:
   - test_47_cp_few_shot [0.00008 s]
[*] Start mutants generation and execution:
   - [#   1] AOR script_NDS_47: 
--------------------------------------------------------------------------------
  1: def median(l: list):
  2:     
  3:     l = sorted(l)
- 4:     if len(l) % 2 == 1:
+ 4:     if len(l) * 2 == 1:
  5:         return l[len(l) // 2]
  6:     else:
  7:         return (l[(len(l) // 2) - 1] + l[len(l) // 2]) / 2.0
--------------------------------------------------------------------------------
[0.00712 s] survived
   - [#   2] AOR script_NDS_47: 
--------------------------------------------------------------------------------
  1: def median(l: list):
  2:     
  3:     l = sorted(l)
  4:     if len(l) % 2 == 1:
- 5:         return l[len(l) // 2]
+ 5:         return l[len(l) / 2]
  6:     else:
  7:         return (l[(len(l) // 2) - 1] + l[len(l) // 2]) / 2.0
--------------------------------------------------------------------------------
[0.00634 s] survived
   - [#   3] AOR script_NDS_47: 
--------------------------------------------------------------------------------
  1: def median(l: list):
  2:     
  3:     l = sorted(l)
  4:     if len(l) % 2 == 1:
- 5:         return l[len(l) // 2]
+ 5:         return l[len(l) * 2]
  6:     else:
  7:         return (l[(len(l) // 2) - 1] + l[len(l) // 2]) / 2.0
--------------------------------------------------------------------------------
[0.00543 s] survived
   - [#   4] AOR script_NDS_47: 
--------------------------------------------------------------------------------
  3:     l = sorted(l)
  4:     if len(l) % 2 == 1:
  5:         return l[len(l) // 2]
  6:     else:
- 7:         return (l[(len(l) // 2) - 1] + l[len(l) // 2]) / 2.0
+ 7:         return (l[(len(l) / 2) - 1] + l[len(l) // 2]) / 2.0
--------------------------------------------------------------------------------
[0.00547 s] survived
   - [#   5] AOR script_NDS_47: 
--------------------------------------------------------------------------------
  3:     l = sorted(l)
  4:     if len(l) % 2 == 1:
  5:         return l[len(l) // 2]
  6:     else:
- 7:         return (l[(len(l) // 2) - 1] + l[len(l) // 2]) / 2.0
+ 7:         return (l[(len(l) * 2) - 1] + l[len(l) // 2]) / 2.0
--------------------------------------------------------------------------------
[0.00636 s] survived
   - [#   6] AOR script_NDS_47: 
--------------------------------------------------------------------------------
  3:     l = sorted(l)
  4:     if len(l) % 2 == 1:
  5:         return l[len(l) // 2]
  6:     else:
- 7:         return (l[(len(l) // 2) - 1] + l[len(l) // 2]) / 2.0
+ 7:         return (l[(len(l) // 2) + 1] + l[len(l) // 2]) / 2.0
--------------------------------------------------------------------------------
[0.00648 s] survived
   - [#   7] AOR script_NDS_47: 
--------------------------------------------------------------------------------
  3:     l = sorted(l)
  4:     if len(l) % 2 == 1:
  5:         return l[len(l) // 2]
  6:     else:
- 7:         return (l[(len(l) // 2) - 1] + l[len(l) // 2]) / 2.0
+ 7:         return (l[(len(l) // 2) - 1] - l[len(l) // 2]) / 2.0
--------------------------------------------------------------------------------
[0.00522 s] survived
   - [#   8] AOR script_NDS_47: 
--------------------------------------------------------------------------------
  3:     l = sorted(l)
  4:     if len(l) % 2 == 1:
  5:         return l[len(l) // 2]
  6:     else:
- 7:         return (l[(len(l) // 2) - 1] + l[len(l) // 2]) / 2.0
+ 7:         return (l[(len(l) // 2) - 1] + l[len(l) / 2]) / 2.0
--------------------------------------------------------------------------------
[0.00697 s] survived
   - [#   9] AOR script_NDS_47: 
--------------------------------------------------------------------------------
  3:     l = sorted(l)
  4:     if len(l) % 2 == 1:
  5:         return l[len(l) // 2]
  6:     else:
- 7:         return (l[(len(l) // 2) - 1] + l[len(l) // 2]) / 2.0
+ 7:         return (l[(len(l) // 2) - 1] + l[len(l) * 2]) / 2.0
--------------------------------------------------------------------------------
[0.00643 s] survived
   - [#  10] AOR script_NDS_47: 
--------------------------------------------------------------------------------
  3:     l = sorted(l)
  4:     if len(l) % 2 == 1:
  5:         return l[len(l) // 2]
  6:     else:
- 7:         return (l[(len(l) // 2) - 1] + l[len(l) // 2]) / 2.0
+ 7:         return (l[(len(l) // 2) - 1] + l[len(l) // 2]) // 2.0
--------------------------------------------------------------------------------
[0.00638 s] survived
   - [#  11] AOR script_NDS_47: 
--------------------------------------------------------------------------------
  3:     l = sorted(l)
  4:     if len(l) % 2 == 1:
  5:         return l[len(l) // 2]
  6:     else:
- 7:         return (l[(len(l) // 2) - 1] + l[len(l) // 2]) / 2.0
+ 7:         return (l[(len(l) // 2) - 1] + l[len(l) // 2]) * 2.0
--------------------------------------------------------------------------------
[0.00704 s] survived
   - [#  12] COI script_NDS_47: 
--------------------------------------------------------------------------------
  1: def median(l: list):
  2:     
  3:     l = sorted(l)
- 4:     if len(l) % 2 == 1:
+ 4:     if not (len(l) % 2 == 1):
  5:         return l[len(l) // 2]
  6:     else:
  7:         return (l[(len(l) // 2) - 1] + l[len(l) // 2]) / 2.0
--------------------------------------------------------------------------------
[0.00740 s] survived
   - [#  13] ROR script_NDS_47: 
--------------------------------------------------------------------------------
  1: def median(l: list):
  2:     
  3:     l = sorted(l)
- 4:     if len(l) % 2 == 1:
+ 4:     if len(l) % 2 != 1:
  5:         return l[len(l) // 2]
  6:     else:
  7:         return (l[(len(l) // 2) - 1] + l[len(l) // 2]) / 2.0
--------------------------------------------------------------------------------
[0.00514 s] survived
[*] Mutation score [0.30813 s]: 0.0%
   - all: 13
   - killed: 0 (0.0%)
   - survived: 13 (100.0%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
