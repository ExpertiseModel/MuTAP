[*] Start mutation process:
   - targets: /home/arghavan/Git_Code/codex_test/HumanEval/Testing_HumanEval/130/script_NDS_130.py
   - tests: /home/arghavan/Git_Code/codex_test/HumanEval/Testing_HumanEval/130/Copilot/test_130_cp_few_shot.py
[*] 0 tests passed:
   - test_130_cp_few_shot [0.00006 s]
[*] Start mutants generation and execution:
   - [#   1] AOR script_NDS_130: 
--------------------------------------------------------------------------------
   2:     
   3:     if n == 0:
   4:         return [1]
   5:     my_tri = [1, 3]
-  6:     for i in range(2, n + 1):
+  6:     for i in range(2, n - 1):
   7:         if i % 2 == 0:
   8:             my_tri.append((i / 2) + 1)
   9:         else:
  10:             my_tri.append((my_tri[i - 1] + my_tri[i - 2]) + ((i + 3) / 2))
--------------------------------------------------------------------------------
[0.00749 s] survived
   - [#   2] AOR script_NDS_130: 
--------------------------------------------------------------------------------
   3:     if n == 0:
   4:         return [1]
   5:     my_tri = [1, 3]
   6:     for i in range(2, n + 1):
-  7:         if i % 2 == 0:
+  7:         if i * 2 == 0:
   8:             my_tri.append((i / 2) + 1)
   9:         else:
  10:             my_tri.append((my_tri[i - 1] + my_tri[i - 2]) + ((i + 3) / 2))
  11:     return my_tri
--------------------------------------------------------------------------------
[0.00506 s] survived
   - [#   3] AOR script_NDS_130: 
--------------------------------------------------------------------------------
   4:         return [1]
   5:     my_tri = [1, 3]
   6:     for i in range(2, n + 1):
   7:         if i % 2 == 0:
-  8:             my_tri.append((i / 2) + 1)
+  8:             my_tri.append((i // 2) + 1)
   9:         else:
  10:             my_tri.append((my_tri[i - 1] + my_tri[i - 2]) + ((i + 3) / 2))
  11:     return my_tri
--------------------------------------------------------------------------------
[0.00549 s] survived
   - [#   4] AOR script_NDS_130: 
--------------------------------------------------------------------------------
   4:         return [1]
   5:     my_tri = [1, 3]
   6:     for i in range(2, n + 1):
   7:         if i % 2 == 0:
-  8:             my_tri.append((i / 2) + 1)
+  8:             my_tri.append((i * 2) + 1)
   9:         else:
  10:             my_tri.append((my_tri[i - 1] + my_tri[i - 2]) + ((i + 3) / 2))
  11:     return my_tri
--------------------------------------------------------------------------------
[0.00602 s] survived
   - [#   5] AOR script_NDS_130: 
--------------------------------------------------------------------------------
   4:         return [1]
   5:     my_tri = [1, 3]
   6:     for i in range(2, n + 1):
   7:         if i % 2 == 0:
-  8:             my_tri.append((i / 2) + 1)
+  8:             my_tri.append((i / 2) - 1)
   9:         else:
  10:             my_tri.append((my_tri[i - 1] + my_tri[i - 2]) + ((i + 3) / 2))
  11:     return my_tri
--------------------------------------------------------------------------------
[0.00575 s] survived
   - [#   6] AOR script_NDS_130: 
--------------------------------------------------------------------------------
   6:     for i in range(2, n + 1):
   7:         if i % 2 == 0:
   8:             my_tri.append((i / 2) + 1)
   9:         else:
- 10:             my_tri.append((my_tri[i - 1] + my_tri[i - 2]) + ((i + 3) / 2))
+ 10:             my_tri.append((my_tri[i + 1] + my_tri[i - 2]) + ((i + 3) / 2))
  11:     return my_tri
--------------------------------------------------------------------------------
[0.00721 s] survived
   - [#   7] AOR script_NDS_130: 
--------------------------------------------------------------------------------
   6:     for i in range(2, n + 1):
   7:         if i % 2 == 0:
   8:             my_tri.append((i / 2) + 1)
   9:         else:
- 10:             my_tri.append((my_tri[i - 1] + my_tri[i - 2]) + ((i + 3) / 2))
+ 10:             my_tri.append((my_tri[i - 1] - my_tri[i - 2]) + ((i + 3) / 2))
  11:     return my_tri
--------------------------------------------------------------------------------
[0.00637 s] survived
   - [#   8] AOR script_NDS_130: 
--------------------------------------------------------------------------------
   6:     for i in range(2, n + 1):
   7:         if i % 2 == 0:
   8:             my_tri.append((i / 2) + 1)
   9:         else:
- 10:             my_tri.append((my_tri[i - 1] + my_tri[i - 2]) + ((i + 3) / 2))
+ 10:             my_tri.append((my_tri[i - 1] + my_tri[i + 2]) + ((i + 3) / 2))
  11:     return my_tri
--------------------------------------------------------------------------------
[0.00591 s] survived
   - [#   9] AOR script_NDS_130: 
--------------------------------------------------------------------------------
   6:     for i in range(2, n + 1):
   7:         if i % 2 == 0:
   8:             my_tri.append((i / 2) + 1)
   9:         else:
- 10:             my_tri.append((my_tri[i - 1] + my_tri[i - 2]) + ((i + 3) / 2))
+ 10:             my_tri.append((my_tri[i - 1] + my_tri[i - 2]) - ((i + 3) / 2))
  11:     return my_tri
--------------------------------------------------------------------------------
[0.00580 s] survived
   - [#  10] AOR script_NDS_130: 
--------------------------------------------------------------------------------
   6:     for i in range(2, n + 1):
   7:         if i % 2 == 0:
   8:             my_tri.append((i / 2) + 1)
   9:         else:
- 10:             my_tri.append((my_tri[i - 1] + my_tri[i - 2]) + ((i + 3) / 2))
+ 10:             my_tri.append((my_tri[i - 1] + my_tri[i - 2]) + ((i - 3) / 2))
  11:     return my_tri
--------------------------------------------------------------------------------
[0.00805 s] survived
   - [#  11] AOR script_NDS_130: 
--------------------------------------------------------------------------------
   6:     for i in range(2, n + 1):
   7:         if i % 2 == 0:
   8:             my_tri.append((i / 2) + 1)
   9:         else:
- 10:             my_tri.append((my_tri[i - 1] + my_tri[i - 2]) + ((i + 3) / 2))
+ 10:             my_tri.append((my_tri[i - 1] + my_tri[i - 2]) + ((i + 3) // 2))
  11:     return my_tri
--------------------------------------------------------------------------------
[0.00739 s] survived
   - [#  12] AOR script_NDS_130: 
--------------------------------------------------------------------------------
   6:     for i in range(2, n + 1):
   7:         if i % 2 == 0:
   8:             my_tri.append((i / 2) + 1)
   9:         else:
- 10:             my_tri.append((my_tri[i - 1] + my_tri[i - 2]) + ((i + 3) / 2))
+ 10:             my_tri.append((my_tri[i - 1] + my_tri[i - 2]) + ((i + 3) * 2))
  11:     return my_tri
--------------------------------------------------------------------------------
[0.00597 s] survived
   - [#  13] COI script_NDS_130: 
--------------------------------------------------------------------------------
   1: def tri(n):
   2:     
-  3:     if n == 0:
+  3:     if not (n == 0):
   4:         return [1]
   5:     my_tri = [1, 3]
   6:     for i in range(2, n + 1):
   7:         if i % 2 == 0:
--------------------------------------------------------------------------------
[0.00637 s] survived
   - [#  14] COI script_NDS_130: 
--------------------------------------------------------------------------------
   3:     if n == 0:
   4:         return [1]
   5:     my_tri = [1, 3]
   6:     for i in range(2, n + 1):
-  7:         if i % 2 == 0:
+  7:         if not (i % 2 == 0):
   8:             my_tri.append((i / 2) + 1)
   9:         else:
  10:             my_tri.append((my_tri[i - 1] + my_tri[i - 2]) + ((i + 3) / 2))
  11:     return my_tri
--------------------------------------------------------------------------------
[0.00483 s] survived
   - [#  15] ROR script_NDS_130: 
--------------------------------------------------------------------------------
   1: def tri(n):
   2:     
-  3:     if n == 0:
+  3:     if n != 0:
   4:         return [1]
   5:     my_tri = [1, 3]
   6:     for i in range(2, n + 1):
   7:         if i % 2 == 0:
--------------------------------------------------------------------------------
[0.00582 s] survived
   - [#  16] ROR script_NDS_130: 
--------------------------------------------------------------------------------
   3:     if n == 0:
   4:         return [1]
   5:     my_tri = [1, 3]
   6:     for i in range(2, n + 1):
-  7:         if i % 2 == 0:
+  7:         if i % 2 != 0:
   8:             my_tri.append((i / 2) + 1)
   9:         else:
  10:             my_tri.append((my_tri[i - 1] + my_tri[i - 2]) + ((i + 3) / 2))
  11:     return my_tri
--------------------------------------------------------------------------------
[0.00576 s] survived
[*] Mutation score [0.41748 s]: 0.0%
   - all: 16
   - killed: 0 (0.0%)
   - survived: 16 (100.0%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
