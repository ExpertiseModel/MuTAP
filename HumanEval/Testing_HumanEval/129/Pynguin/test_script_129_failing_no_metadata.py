# Automatically generated by Pynguin.
import script_129 as module_0


def test_case_0():
    try:
        set_0 = set()
        int_0 = -875
        var_0 = module_0.minPath(set_0, int_0)
        assert var_0 == []
        tuple_0 = ()
        set_1 = {tuple_0, tuple_0}
        var_1 = module_0.minPath(tuple_0, set_1)
    except BaseException:
        pass


def test_case_1():
    try:
        str_0 = "k|'Anm{_\\jkue5E,gUx"
        str_1 = 'L\n'
        var_0 = module_0.minPath(str_0, str_1)
    except BaseException:
        pass


def test_case_2():
    try:
        tuple_0 = ()
        bytes_0 = None
        var_0 = module_0.minPath(tuple_0, bytes_0)
    except BaseException:
        pass


def test_case_3():
    try:
        bytes_0 = b'\xf2\x1c&\x16'
        tuple_0 = bytes_0, bytes_0
        str_0 = 'w: \nJkJw,'
        var_0 = module_0.minPath(tuple_0, str_0)
    except BaseException:
        pass


def test_case_4():
    try:
        bytes_0 = b'ao\xa8\xda\xde\rB\x8av-\xc9\x19\x16\xf5'
        set_0 = {bytes_0, bytes_0, bytes_0}
        str_0 = '%hbJ;H'
        list_0 = [str_0, set_0, str_0]
        bool_0 = True
        bool_1 = False
        tuple_0 = set_0, list_0, bool_0, bool_1
        str_1 = 'f/L7E%zb=*-aQj-3q>'
        tuple_1 = bytes_0, tuple_0, str_1
        var_0 = module_0.minPath(tuple_1, tuple_1)
    except BaseException:
        pass


def test_case_5():
    try:
        set_0 = set()
        bool_0 = True
        var_0 = module_0.minPath(set_0, bool_0)
        assert var_0 == [1]
        list_0 = [var_0, bool_0]
        float_0 = 1415.0
        str_0 = ',UZP4'
        tuple_0 = float_0, str_0, list_0
        var_1 = module_0.minPath(list_0, tuple_0)
    except BaseException:
        pass


def test_case_6():
    try:
        set_0 = set()
        bool_0 = True
        var_0 = module_0.minPath(set_0, bool_0)
        assert var_0 == [1]
        list_0 = [var_0]
        float_0 = 1414.2127266563268
        str_0 = 'rO'
        tuple_0 = float_0, str_0, list_0
        var_1 = module_0.minPath(list_0, tuple_0)
    except BaseException:
        pass


def test_case_7():
    try:
        set_0 = set()
        int_0 = 136
        var_0 = module_0.minPath(set_0, int_0)
        assert var_0 == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        str_0 = ''
        str_1 = 'rdD\x0cwaX5NB=Nk'
        var_1 = module_0.minPath(str_1, str_0)
    except BaseException:
        pass


def test_case_8():
    try:
        set_0 = set()
        bool_0 = True
        var_0 = module_0.minPath(set_0, bool_0)
        assert var_0 == [1]
        list_0 = [var_0, var_0, var_0]
        var_1 = module_0.minPath(list_0, bool_0)
    except BaseException:
        pass
