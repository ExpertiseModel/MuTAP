[*] Start mutation process:
   - targets: /home/arghavan/Git_Code/codex_test/HumanEval/Testing_HumanEval/129/script_NDS_129.py
   - tests: /home/arghavan/Git_Code/codex_test/HumanEval/Testing_HumanEval/129/Copilot/test_129_cp_few_shot.py
[*] 0 tests passed:
   - test_129_cp_few_shot [0.00006 s]
[*] Start mutants generation and execution:
   - [#   1] AOR script_NDS_129: 
--------------------------------------------------------------------------------
   1: def minPath(grid, k):
   2:     
   3:     n = len(grid)
-  4:     val = (n * n) + 1
+  4:     val = (n / n) + 1
   5:     for i in range(n):
   6:         for j in range(n):
   7:             if grid[i][j] == 1:
   8:                 temp = []
--------------------------------------------------------------------------------
[0.00584 s] survived
   - [#   2] AOR script_NDS_129: 
--------------------------------------------------------------------------------
   1: def minPath(grid, k):
   2:     
   3:     n = len(grid)
-  4:     val = (n * n) + 1
+  4:     val = (n // n) + 1
   5:     for i in range(n):
   6:         for j in range(n):
   7:             if grid[i][j] == 1:
   8:                 temp = []
--------------------------------------------------------------------------------
[0.00612 s] survived
   - [#   3] AOR script_NDS_129: 
--------------------------------------------------------------------------------
   1: def minPath(grid, k):
   2:     
   3:     n = len(grid)
-  4:     val = (n * n) + 1
+  4:     val = (n ** n) + 1
   5:     for i in range(n):
   6:         for j in range(n):
   7:             if grid[i][j] == 1:
   8:                 temp = []
--------------------------------------------------------------------------------
[0.00624 s] survived
   - [#   4] AOR script_NDS_129: 
--------------------------------------------------------------------------------
   1: def minPath(grid, k):
   2:     
   3:     n = len(grid)
-  4:     val = (n * n) + 1
+  4:     val = (n * n) - 1
   5:     for i in range(n):
   6:         for j in range(n):
   7:             if grid[i][j] == 1:
   8:                 temp = []
--------------------------------------------------------------------------------
[0.00744 s] survived
   - [#   5] AOR script_NDS_129: 
--------------------------------------------------------------------------------
   6:         for j in range(n):
   7:             if grid[i][j] == 1:
   8:                 temp = []
   9:                 if i != 0:
- 10:                     temp.append(grid[i - 1][j])
+ 10:                     temp.append(grid[i + 1][j])
  11:                 
  12:                 if j != 0:
  13:                     temp.append(grid[i][j - 1])
  14:                 
--------------------------------------------------------------------------------
[0.00490 s] survived
   - [#   6] AOR script_NDS_129: 
--------------------------------------------------------------------------------
   9:                 if i != 0:
  10:                     temp.append(grid[i - 1][j])
  11:                 
  12:                 if j != 0:
- 13:                     temp.append(grid[i][j - 1])
+ 13:                     temp.append(grid[i][j + 1])
  14:                 
  15:                 if i != n - 1:
  16:                     temp.append(grid[i + 1][j])
  17:                 
--------------------------------------------------------------------------------
[0.00555 s] survived
   - [#   7] AOR script_NDS_129: 
--------------------------------------------------------------------------------
  11:                 
  12:                 if j != 0:
  13:                     temp.append(grid[i][j - 1])
  14:                 
- 15:                 if i != n - 1:
+ 15:                 if i != n + 1:
  16:                     temp.append(grid[i + 1][j])
  17:                 
  18:                 if j != n - 1:
  19:                     temp.append(grid[i][j + 1])
--------------------------------------------------------------------------------
[0.00726 s] survived
   - [#   8] AOR script_NDS_129: 
--------------------------------------------------------------------------------
  12:                 if j != 0:
  13:                     temp.append(grid[i][j - 1])
  14:                 
  15:                 if i != n - 1:
- 16:                     temp.append(grid[i + 1][j])
+ 16:                     temp.append(grid[i - 1][j])
  17:                 
  18:                 if j != n - 1:
  19:                     temp.append(grid[i][j + 1])
  20:                 
--------------------------------------------------------------------------------
[0.00583 s] survived
   - [#   9] AOR script_NDS_129: 
--------------------------------------------------------------------------------
  14:                 
  15:                 if i != n - 1:
  16:                     temp.append(grid[i + 1][j])
  17:                 
- 18:                 if j != n - 1:
+ 18:                 if j != n + 1:
  19:                     temp.append(grid[i][j + 1])
  20:                 
  21:                 val = min(temp)
  22:     
--------------------------------------------------------------------------------
[0.00727 s] survived
   - [#  10] AOR script_NDS_129: 
--------------------------------------------------------------------------------
  15:                 if i != n - 1:
  16:                     temp.append(grid[i + 1][j])
  17:                 
  18:                 if j != n - 1:
- 19:                     temp.append(grid[i][j + 1])
+ 19:                     temp.append(grid[i][j - 1])
  20:                 
  21:                 val = min(temp)
  22:     
  23:     ans = []
--------------------------------------------------------------------------------
[0.00623 s] survived
   - [#  11] AOR script_NDS_129: 
--------------------------------------------------------------------------------
  21:                 val = min(temp)
  22:     
  23:     ans = []
  24:     for i in range(k):
- 25:         if i % 2 == 0:
+ 25:         if i * 2 == 0:
  26:             ans.append(1)
  27:         else:
  28:             ans.append(val)
  29:     return ans
--------------------------------------------------------------------------------
[0.00608 s] survived
   - [#  12] COI script_NDS_129: 
--------------------------------------------------------------------------------
   3:     n = len(grid)
   4:     val = (n * n) + 1
   5:     for i in range(n):
   6:         for j in range(n):
-  7:             if grid[i][j] == 1:
+  7:             if not (grid[i][j] == 1):
   8:                 temp = []
   9:                 if i != 0:
  10:                     temp.append(grid[i - 1][j])
  11:                 
--------------------------------------------------------------------------------
[0.00752 s] survived
   - [#  13] COI script_NDS_129: 
--------------------------------------------------------------------------------
   5:     for i in range(n):
   6:         for j in range(n):
   7:             if grid[i][j] == 1:
   8:                 temp = []
-  9:                 if i != 0:
+  9:                 if not (i != 0):
  10:                     temp.append(grid[i - 1][j])
  11:                 
  12:                 if j != 0:
  13:                     temp.append(grid[i][j - 1])
--------------------------------------------------------------------------------
[0.00501 s] survived
   - [#  14] COI script_NDS_129: 
--------------------------------------------------------------------------------
   8:                 temp = []
   9:                 if i != 0:
  10:                     temp.append(grid[i - 1][j])
  11:                 
- 12:                 if j != 0:
+ 12:                 if not (j != 0):
  13:                     temp.append(grid[i][j - 1])
  14:                 
  15:                 if i != n - 1:
  16:                     temp.append(grid[i + 1][j])
--------------------------------------------------------------------------------
[0.00544 s] survived
   - [#  15] COI script_NDS_129: 
--------------------------------------------------------------------------------
  11:                 
  12:                 if j != 0:
  13:                     temp.append(grid[i][j - 1])
  14:                 
- 15:                 if i != n - 1:
+ 15:                 if not (i != n - 1):
  16:                     temp.append(grid[i + 1][j])
  17:                 
  18:                 if j != n - 1:
  19:                     temp.append(grid[i][j + 1])
--------------------------------------------------------------------------------
[0.00661 s] survived
   - [#  16] COI script_NDS_129: 
--------------------------------------------------------------------------------
  14:                 
  15:                 if i != n - 1:
  16:                     temp.append(grid[i + 1][j])
  17:                 
- 18:                 if j != n - 1:
+ 18:                 if not (j != n - 1):
  19:                     temp.append(grid[i][j + 1])
  20:                 
  21:                 val = min(temp)
  22:     
--------------------------------------------------------------------------------
[0.00773 s] survived
   - [#  17] COI script_NDS_129: 
--------------------------------------------------------------------------------
  21:                 val = min(temp)
  22:     
  23:     ans = []
  24:     for i in range(k):
- 25:         if i % 2 == 0:
+ 25:         if not (i % 2 == 0):
  26:             ans.append(1)
  27:         else:
  28:             ans.append(val)
  29:     return ans
--------------------------------------------------------------------------------
[0.00566 s] survived
   - [#  18] ROR script_NDS_129: 
--------------------------------------------------------------------------------
   3:     n = len(grid)
   4:     val = (n * n) + 1
   5:     for i in range(n):
   6:         for j in range(n):
-  7:             if grid[i][j] == 1:
+  7:             if grid[i][j] != 1:
   8:                 temp = []
   9:                 if i != 0:
  10:                     temp.append(grid[i - 1][j])
  11:                 
--------------------------------------------------------------------------------
[0.00640 s] survived
   - [#  19] ROR script_NDS_129: 
--------------------------------------------------------------------------------
   5:     for i in range(n):
   6:         for j in range(n):
   7:             if grid[i][j] == 1:
   8:                 temp = []
-  9:                 if i != 0:
+  9:                 if i == 0:
  10:                     temp.append(grid[i - 1][j])
  11:                 
  12:                 if j != 0:
  13:                     temp.append(grid[i][j - 1])
--------------------------------------------------------------------------------
[0.00594 s] survived
   - [#  20] ROR script_NDS_129: 
--------------------------------------------------------------------------------
   8:                 temp = []
   9:                 if i != 0:
  10:                     temp.append(grid[i - 1][j])
  11:                 
- 12:                 if j != 0:
+ 12:                 if j == 0:
  13:                     temp.append(grid[i][j - 1])
  14:                 
  15:                 if i != n - 1:
  16:                     temp.append(grid[i + 1][j])
--------------------------------------------------------------------------------
[0.00551 s] survived
   - [#  21] ROR script_NDS_129: 
--------------------------------------------------------------------------------
  11:                 
  12:                 if j != 0:
  13:                     temp.append(grid[i][j - 1])
  14:                 
- 15:                 if i != n - 1:
+ 15:                 if i == n - 1:
  16:                     temp.append(grid[i + 1][j])
  17:                 
  18:                 if j != n - 1:
  19:                     temp.append(grid[i][j + 1])
--------------------------------------------------------------------------------
[0.00602 s] survived
   - [#  22] ROR script_NDS_129: 
--------------------------------------------------------------------------------
  14:                 
  15:                 if i != n - 1:
  16:                     temp.append(grid[i + 1][j])
  17:                 
- 18:                 if j != n - 1:
+ 18:                 if j == n - 1:
  19:                     temp.append(grid[i][j + 1])
  20:                 
  21:                 val = min(temp)
  22:     
--------------------------------------------------------------------------------
[0.00550 s] survived
   - [#  23] ROR script_NDS_129: 
--------------------------------------------------------------------------------
  21:                 val = min(temp)
  22:     
  23:     ans = []
  24:     for i in range(k):
- 25:         if i % 2 == 0:
+ 25:         if i % 2 != 0:
  26:             ans.append(1)
  27:         else:
  28:             ans.append(val)
  29:     return ans
--------------------------------------------------------------------------------
[0.00771 s] survived
[*] Mutation score [0.98887 s]: 0.0%
   - all: 23
   - killed: 0 (0.0%)
   - survived: 23 (100.0%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
