[*] Start mutation process:
   - targets: /home/arghavan/Git_Code/codex_test/HumanEval/Testing_HumanEval/59/script_NDS_59.py
   - tests: /home/arghavan/Git_Code/codex_test/HumanEval/Testing_HumanEval/59/Copilot/test_59_cp_few_shot.py
[*] 0 tests passed:
   - test_59_cp_few_shot [0.00006 s]
[*] Start mutants generation and execution:
   - [#   1] AOR script_NDS_59: 
--------------------------------------------------------------------------------
   2:     
   3:     def is_prime(k):
   4:         if k < 2:
   5:             return False
-  6:         for i in range(2, k - 1):
+  6:         for i in range(2, k + 1):
   7:             if k % i == 0:
   8:                 return False
   9:         return True
  10:     largest = 1
--------------------------------------------------------------------------------
[0.00688 s] survived
   - [#   2] AOR script_NDS_59: 
--------------------------------------------------------------------------------
   3:     def is_prime(k):
   4:         if k < 2:
   5:             return False
   6:         for i in range(2, k - 1):
-  7:             if k % i == 0:
+  7:             if k * i == 0:
   8:                 return False
   9:         return True
  10:     largest = 1
  11:     for j in range(2, n + 1):
--------------------------------------------------------------------------------
[0.00649 s] survived
   - [#   3] AOR script_NDS_59: 
--------------------------------------------------------------------------------
   7:             if k % i == 0:
   8:                 return False
   9:         return True
  10:     largest = 1
- 11:     for j in range(2, n + 1):
+ 11:     for j in range(2, n - 1):
  12:         if (n % j == 0 and is_prime(j)):
  13:             largest = max(largest, j)
  14:     return largest
--------------------------------------------------------------------------------
[0.00561 s] survived
   - [#   4] AOR script_NDS_59: 
--------------------------------------------------------------------------------
   8:                 return False
   9:         return True
  10:     largest = 1
  11:     for j in range(2, n + 1):
- 12:         if (n % j == 0 and is_prime(j)):
+ 12:         if (n * j == 0 and is_prime(j)):
  13:             largest = max(largest, j)
  14:     return largest
--------------------------------------------------------------------------------
[0.00643 s] survived
   - [#   5] COI script_NDS_59: 
--------------------------------------------------------------------------------
   1: def largest_prime_factor(n: int):
   2:     
   3:     def is_prime(k):
-  4:         if k < 2:
+  4:         if not (k < 2):
   5:             return False
   6:         for i in range(2, k - 1):
   7:             if k % i == 0:
   8:                 return False
--------------------------------------------------------------------------------
[0.00482 s] survived
   - [#   6] COI script_NDS_59: 
--------------------------------------------------------------------------------
   3:     def is_prime(k):
   4:         if k < 2:
   5:             return False
   6:         for i in range(2, k - 1):
-  7:             if k % i == 0:
+  7:             if not (k % i == 0):
   8:                 return False
   9:         return True
  10:     largest = 1
  11:     for j in range(2, n + 1):
--------------------------------------------------------------------------------
[0.00645 s] survived
   - [#   7] COI script_NDS_59: 
--------------------------------------------------------------------------------
   8:                 return False
   9:         return True
  10:     largest = 1
  11:     for j in range(2, n + 1):
- 12:         if (n % j == 0 and is_prime(j)):
+ 12:         if not ((n % j == 0 and is_prime(j))):
  13:             largest = max(largest, j)
  14:     return largest
--------------------------------------------------------------------------------
[0.00628 s] survived
   - [#   8] LCR script_NDS_59: 
--------------------------------------------------------------------------------
   8:                 return False
   9:         return True
  10:     largest = 1
  11:     for j in range(2, n + 1):
- 12:         if (n % j == 0 and is_prime(j)):
+ 12:         if (n % j == 0 or is_prime(j)):
  13:             largest = max(largest, j)
  14:     return largest
--------------------------------------------------------------------------------
[0.00490 s] survived
   - [#   9] ROR script_NDS_59: 
--------------------------------------------------------------------------------
   1: def largest_prime_factor(n: int):
   2:     
   3:     def is_prime(k):
-  4:         if k < 2:
+  4:         if k > 2:
   5:             return False
   6:         for i in range(2, k - 1):
   7:             if k % i == 0:
   8:                 return False
--------------------------------------------------------------------------------
[0.00576 s] survived
   - [#  10] ROR script_NDS_59: 
--------------------------------------------------------------------------------
   1: def largest_prime_factor(n: int):
   2:     
   3:     def is_prime(k):
-  4:         if k < 2:
+  4:         if k <= 2:
   5:             return False
   6:         for i in range(2, k - 1):
   7:             if k % i == 0:
   8:                 return False
--------------------------------------------------------------------------------
[0.00797 s] survived
   - [#  11] ROR script_NDS_59: 
--------------------------------------------------------------------------------
   3:     def is_prime(k):
   4:         if k < 2:
   5:             return False
   6:         for i in range(2, k - 1):
-  7:             if k % i == 0:
+  7:             if k % i != 0:
   8:                 return False
   9:         return True
  10:     largest = 1
  11:     for j in range(2, n + 1):
--------------------------------------------------------------------------------
[0.00556 s] survived
   - [#  12] ROR script_NDS_59: 
--------------------------------------------------------------------------------
   8:                 return False
   9:         return True
  10:     largest = 1
  11:     for j in range(2, n + 1):
- 12:         if (n % j == 0 and is_prime(j)):
+ 12:         if (n % j != 0 and is_prime(j)):
  13:             largest = max(largest, j)
  14:     return largest
--------------------------------------------------------------------------------
[0.00671 s] survived
[*] Mutation score [0.32366 s]: 0.0%
   - all: 12
   - killed: 0 (0.0%)
   - survived: 12 (100.0%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
