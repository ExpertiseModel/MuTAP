# Automatically generated by Pynguin.
import script_132 as module_0


def test_case_0():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    var_0 = module_0.is_nested(list_0)
    assert var_0 is False
    tuple_0 = ()
    var_1 = module_0.is_nested(tuple_0)
    assert var_1 is False


def test_case_1():
    str_0 = 'sGl9e&$'
    str_1 = '%['
    var_0 = module_0.is_nested(str_1)
    assert var_0 is False
    str_2 = '|@G'
    var_1 = module_0.is_nested(str_2)
    assert var_1 is False
    var_2 = module_0.is_nested(str_1)
    assert var_2 is False
    var_3 = module_0.is_nested(str_0)
    assert var_3 is False


def test_case_2():
    str_0 = 'sGl$>e&$'
    str_1 = '`[Og/{aD*M?Gg\\` ^&b?'
    var_0 = module_0.is_nested(str_1)
    assert var_0 is False
    var_1 = module_0.is_nested(str_1)
    assert var_1 is False
    var_2 = module_0.is_nested(str_0)
    assert var_2 is False
    tuple_0 = ()
    var_3 = module_0.is_nested(tuple_0)
    assert var_3 is False
    var_4 = module_0.is_nested(tuple_0)
    assert var_4 is False
    var_5 = module_0.is_nested(tuple_0)
    assert var_5 is False
    str_2 = 'X\x0bA\x0cM#&Rkp:hw6'
    var_6 = module_0.is_nested(str_2)
    assert var_6 is False
    set_0 = set()
    var_7 = module_0.is_nested(set_0)
    assert var_7 is False
    var_8 = module_0.is_nested(set_0)
    assert var_8 is False
    bytes_0 = b'\xcf\xc21B\xfb'
    var_9 = module_0.is_nested(bytes_0)
    assert var_9 is False
    var_10 = module_0.is_nested(bytes_0)
    assert var_10 is False
